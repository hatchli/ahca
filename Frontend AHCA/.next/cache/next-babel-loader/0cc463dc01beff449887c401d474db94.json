{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Wade\\\\Documents\\\\AHCA Web\\\\Frontend AHCA\\\\components\\\\LocationCard.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport wait from \"waait\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Label, Input, Select, Textarea, Radio, Checkbox } from \"@rebass/forms\";\nimport { Box, Flex, Button, Card, Image, Heading, Text } from \"rebass\";\nconst UPDATE_PHONE_LOCATION = gql`\n  mutation UPDATE_PHONE_LOCATION(\n    $name: String\n    $location: String\n    $phone: String\n    $email: String\n  ) {\n    updatePhoneLocation(\n      name: $name\n      location: $location\n      phone: $phone\n      email: $email\n    ) {\n      id\n    }\n  }\n`;\nexport default class LocationCard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      location: \"\",\n      phone: \"\",\n      email: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === \"number\" ? _parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.county !== prevProps.county) {\n      this.setState(prevState => _objectSpread({}, prevState, {\n        location: this.props.county\n      }));\n    }\n  } // componentWillUpdate(prevProps, prevState) {\n  //   if (this.state !== prevState) {\n  //     async function updateWhileTyping() {\n  //       await wait(2000);\n  //       await updatePhoneLocation();\n  //     }\n  //     updateWhileTyping();\n  //   }\n  // }\n\n\n  render() {\n    const maround = [1, 3];\n    const pleft = [0, 1, 2, 3];\n    const wconst = [1, 1 / 4]; // const [county] = this.props;\n\n    return __jsx(Mutation, {\n      mutation: UPDATE_PHONE_LOCATION,\n      variables: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, (updatePhoneLocation, {\n      loading,\n      error\n    }) => {\n      const updateCounty = async () => {\n        this.setState({\n          location: this.props.county\n        });\n        {\n          /* const res = await updatePhoneLocation();\r\n          console.log(res); */\n        }\n      };\n\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, __jsx(Box, {\n        as: \"form\",\n        onSubmit: async e => {\n          e.preventDefault();\n          console.log(\"submitted\");\n          const res = await updatePhoneLocation();\n          console.log(\"res\", res);\n        },\n        pl: pleft,\n        py: 3,\n        width: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, __jsx(Heading, {\n        pcolor: \"near-black\",\n        fontSize: [4, 5, 6],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Are we in your neighboorhood?\"), __jsx(Flex, {\n        flexWrap: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, __jsx(Box, {\n        width: wconst,\n        mx: maround,\n        pl: pleft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, __jsx(Label, {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Name\"), __jsx(Input, {\n        id: \"name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Name\",\n        value: this.state.name,\n        onChange: async e => {\n          this.handleChange(e);\n          await wait(3000);\n          const res = await updatePhoneLocation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), __jsx(Box, {\n        width: wconst,\n        mx: maround,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, __jsx(Label, {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Phone\"), __jsx(Input, {\n        id: \"phone\",\n        name: \"phone\",\n        type: \"text\",\n        placeholder: \"Phone\",\n        value: this.state.phone,\n        onChange: async e => {\n          this.handleChange(e);\n          await wait(3000);\n          const res = await updatePhoneLocation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), __jsx(Box, {\n        width: wconst,\n        mx: maround,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(Label, {\n        htmlFor: \"location\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Location\"), __jsx(Heading, {\n        fontSize: [3, 4, 5],\n        color: \"near-black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(React.Fragment, null, this.props.county, this.props.county !== this.state.location && updateCounty())))), __jsx(Flex, {\n        mx: -2,\n        flexWrap: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(Box, {\n        p: 2,\n        ml: \"[3, 4, 5, 6]\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, __jsx(Button, {\n        type: \"submit\",\n        bg: \"dark-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Submit\")))));\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Wade/Documents/AHCA Web/Frontend AHCA/components/LocationCard.js"],"names":["React","Component","wait","Mutation","gql","Label","Input","Select","Textarea","Radio","Checkbox","Box","Flex","Button","Card","Image","Heading","Text","UPDATE_PHONE_LOCATION","LocationCard","name","location","phone","email","e","type","value","target","val","setState","componentDidUpdate","prevProps","prevState","props","county","render","maround","pleft","wconst","state","updatePhoneLocation","loading","error","updateCounty","preventDefault","console","log","res","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport wait from \"waait\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Label, Input, Select, Textarea, Radio, Checkbox } from \"@rebass/forms\";\r\nimport { Box, Flex, Button, Card, Image, Heading, Text } from \"rebass\";\r\n\r\nconst UPDATE_PHONE_LOCATION = gql`\r\n  mutation UPDATE_PHONE_LOCATION(\r\n    $name: String\r\n    $location: String\r\n    $phone: String\r\n    $email: String\r\n  ) {\r\n    updatePhoneLocation(\r\n      name: $name\r\n      location: $location\r\n      phone: $phone\r\n      email: $email\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class LocationCard extends Component {\r\n  state = {\r\n    name: \"\",\r\n    location: \"\",\r\n    phone: \"\",\r\n    email: \"\"\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.county !== prevProps.county) {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        location: this.props.county\r\n      }));\r\n    }\r\n  }\r\n\r\n  // componentWillUpdate(prevProps, prevState) {\r\n  //   if (this.state !== prevState) {\r\n  //     async function updateWhileTyping() {\r\n  //       await wait(2000);\r\n  //       await updatePhoneLocation();\r\n  //     }\r\n  //     updateWhileTyping();\r\n  //   }\r\n  // }\r\n\r\n  handleChange = e => {\r\n    const { name, type, value } = e.target;\r\n    const val = type === \"number\" ? parseFloat(value) : value;\r\n    this.setState({ [name]: val });\r\n  };\r\n\r\n  render() {\r\n    const maround = [1, 3];\r\n    const pleft = [0, 1, 2, 3];\r\n    const wconst = [1, 1 / 4];\r\n    // const [county] = this.props;\r\n    return (\r\n      <Mutation mutation={UPDATE_PHONE_LOCATION} variables={this.state}>\r\n        {(updatePhoneLocation, { loading, error }) => {\r\n          const updateCounty = async () => {\r\n            this.setState({ location: this.props.county });\r\n            {\r\n              /* const res = await updatePhoneLocation();\r\n            console.log(res); */\r\n            }\r\n          };\r\n          return (\r\n            <div>\r\n              <Box\r\n                as=\"form\"\r\n                onSubmit={async e => {\r\n                  e.preventDefault();\r\n                  console.log(\"submitted\");\r\n                  const res = await updatePhoneLocation();\r\n                  console.log(\"res\", res);\r\n                }}\r\n                pl={pleft}\r\n                py={3}\r\n                width={1}\r\n              >\r\n                <Heading pcolor=\"near-black\" fontSize={[4, 5, 6]}>\r\n                  Are we in your neighboorhood?\r\n                </Heading>\r\n                <Flex flexWrap=\"wrap\">\r\n                  <Box width={wconst} mx={maround} pl={pleft}>\r\n                    <Label htmlFor=\"name\">Name</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      name=\"name\"\r\n                      type=\"text\"\r\n                      placeholder=\"Name\"\r\n                      value={this.state.name}\r\n                      onChange={async e => {\r\n                        this.handleChange(e);\r\n                        await wait(3000);\r\n                        const res = await updatePhoneLocation();\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box width={wconst} mx={maround}>\r\n                    <Label htmlFor=\"name\">Phone</Label>\r\n                    <Input\r\n                      id=\"phone\"\r\n                      name=\"phone\"\r\n                      type=\"text\"\r\n                      placeholder=\"Phone\"\r\n                      value={this.state.phone}\r\n                      onChange={async e => {\r\n                        this.handleChange(e);\r\n                        await wait(3000);\r\n                        const res = await updatePhoneLocation();\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box width={wconst} mx={maround}>\r\n                    <Label htmlFor=\"location\">Location</Label>\r\n                    <Heading fontSize={[3, 4, 5]} color=\"near-black\">\r\n                      <>\r\n                        {this.props.county}\r\n                        {this.props.county !== this.state.location &&\r\n                          updateCounty()}\r\n                      </>\r\n                    </Heading>\r\n                  </Box>\r\n                </Flex>\r\n                <Flex mx={-2} flexWrap=\"wrap\">\r\n                  <Box p={2} ml=\"[3, 4, 5, 6]\">\r\n                    <Button type=\"submit\" bg=\"dark-green\">\r\n                      Submit\r\n                    </Button>\r\n                  </Box>\r\n                </Flex>\r\n              </Box>\r\n            </div>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}