{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Box, Flex } from \"rebass\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport WidthStyles from \"./styles/WidthStyles\";\nconst possibleCategories = [\"AIRCONDITIONER\", \"FURNACE\", \"WHOLEHOMEMANIFOLD\", \"TANKLESSWATERSYSTEM\", \"WATERSOFTENER\", \"WATERFILTRATION\", \"PLUMBING\", \"HEATPUMP\", \"DUCTLESSMINISPLIT\"];\nconst promoCodes = [\"LACOUNTY2020\", \"SFCOUNTY2020\"];\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $features: [String!]\n    $highlights: [String!]\n    $sale: Boolean\n    $categories: [Category]\n    $price: Int!\n    $promo: [ValidPromoCodes]\n    $image: String\n    $largeImage: String\n    $image1: String\n    $largeImage1: String\n    $image2: String\n    $largeImage2: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      features: $features\n      highlights: $highlights\n      sale: $sale\n      categories: $categories\n      price: $price\n      promo: $promo\n      image: $image\n      largeImage: $largeImage\n      image1: $image1\n      largeImage1: $largeImage1\n      image2: $image2\n      largeImage2: $largeImage2\n    ) {\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      title: \"\",\n      description: \"\",\n      features: [\"\"],\n      highlights: [\"\"],\n      sale: false,\n      categories: \"\",\n      imageArray: [],\n      largeImageArray: [],\n      image: \"\",\n      largeImage: \"\",\n      image1: \"\",\n      largeImage1: \"\",\n      image2: \"\",\n      largeImage2: \"\",\n      price: 0,\n      promo: []\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      console.log(\"value: \", e.target.value);\n      console.log(\"name: \", e.target.name);\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === \"number\" ? _parseFloat(value) : value;\n      console.log(\"name: \", name, \"val: \", val);\n      this.setState({\n        [name]: val\n      });\n    });\n\n    _defineProperty(this, \"handleFeatureArrayChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      this.setState(prevState => ({\n        features: prevState.features.map((feat, key) => {\n          if (key == name) {\n            return value;\n          } else return feat;\n        })\n      }));\n    });\n\n    _defineProperty(this, \"handleHighlightArrayChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      this.setState(prevState => ({\n        highlights: prevState.highlights.map((highlight, key) => {\n          if (key == name) {\n            return value;\n          } else return highlight;\n        })\n      }));\n    });\n\n    _defineProperty(this, \"keyPressFeature\", e => {\n      if (e.keyCode == 13) {\n        this.setState({\n          features: this.state.features.concat(\"\")\n        });\n      }\n    });\n\n    _defineProperty(this, \"keyPressHighlight\", e => {\n      if (e.keyCode == 13) {\n        this.setState({\n          highlights: this.state.highlights.concat(\"\")\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleArrayChange\", e => {\n      this.setState({\n        promo: _Array$from(e.target.selectedOptions, item => item.value)\n      });\n    });\n\n    _defineProperty(this, \"uploadFileHandler\", async e => {\n      console.log(\"... uploading\");\n      const files = e.target.files;\n      const data = new FormData();\n\n      _Array$from(files).map(async file => {\n        data.append(\"file\", file);\n        data.append(\"upload_preset\", \"americansavings\");\n        const res = await fetch(\"https://api.cloudinary.com/v1_1/americansavings/image/upload\", {\n          method: \"POST\",\n          body: data\n        });\n        const fileResp = await res.json();\n        console.log(\"fileResp\", fileResp);\n\n        if (!fileResp.error) {\n          this.setState(prevState => _objectSpread({}, prevState, {\n            imageArray: [...prevState.imageArray, fileResp.secure_url],\n            largeImageArray: [...prevState.largeImageArray, fileResp.eager[0].secure_url]\n          }));\n        } else {\n          this.setState(prevState => _objectSpread({}, prevState, {\n            imageArray: [...prevState.image],\n            largeImageArray: [...prevState.largeImage]\n          }));\n        }\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevState\", prevState.imageArray);\n    console.log(\"state of imageArray\", this.state.imageArray);\n\n    if (this.state.imageArray !== prevState.imageArray) {\n      this.setState(prevState => _objectSpread({}, prevState, {\n        image: this.state.imageArray[0],\n        largeImage: this.state.largeImageArray[0],\n        image1: this.state.imageArray[1],\n        largeImage1: this.state.largeImageArray[1],\n        image2: this.state.imageArray[2],\n        largeImage2: this.state.largeImageArray[2]\n      }));\n    }\n  }\n\n  render() {\n    return __jsx(WidthStyles, null, __jsx(Mutation, {\n      mutation: CREATE_ITEM_MUTATION,\n      variables: this.state\n    }, (createItem, {\n      loading,\n      error\n    }) => __jsx(Form, {\n      \"data-test\": \"form\",\n      onSubmit: async e => {\n        // Stop the form from submitting\n        e.preventDefault();\n        const res = await createItem(); // change them to the single item page\n\n        console.log(res);\n        Router.push({\n          pathname: \"/item\",\n          query: {\n            id: res.data.createItem.id\n          }\n        });\n      }\n    }, __jsx(Error, {\n      error: error\n    }), __jsx(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading\n    }, __jsx(Flex, {\n      px: 2,\n      justifyContent: \"space-between\"\n    }, __jsx(\"label\", {\n      htmlFor: \"file\"\n    }, \"Images\", __jsx(\"input\", {\n      multiple: true,\n      type: \"file\",\n      id: \"file\",\n      name: \"file\",\n      placeholder: \"Upload an image\",\n      required: true,\n      onChange: this.uploadFileHandler\n    }))), __jsx(\"label\", {\n      htmlFor: \"title\"\n    }, \"Title\", __jsx(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"Title\",\n      required: true,\n      value: this.state.title,\n      onChange: this.handleChange\n    })), __jsx(\"label\", {\n      htmlFor: \"price\"\n    }, \"Price\", __jsx(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      name: \"price\",\n      placeholder: \"Price\",\n      required: true,\n      value: this.state.price,\n      onChange: this.handleChange\n    })), __jsx(\"label\", {\n      htmlFor: \"sale\"\n    }, \"Sale\", __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"sale\",\n      name: \"sale\",\n      value: this.state.sale,\n      onChange: () => {\n        this.setState({\n          sale: !this.state.value\n        });\n      }\n    })), __jsx(\"label\", {\n      htmlFor: \"categories\"\n    }, \"Category\", __jsx(\"select\", {\n      value: this.state.categories,\n      name: \"categories\",\n      id: \"categories\",\n      onChange: this.handleChange,\n      multiple: false\n    }, possibleCategories.map(category => __jsx(\"option\", {\n      key: category,\n      value: category\n    }, category)))), __jsx(\"label\", {\n      htmlFor: \"categories\"\n    }, \"Promo\", __jsx(\"select\", {\n      value: this.state.promo,\n      name: \"promo\",\n      id: \"promo\" // type=\"array\"\n      ,\n      onChange: this.handleArrayChange,\n      multiple: true\n    }, promoCodes.map(promo => __jsx(\"option\", {\n      key: promo.id,\n      value: promo\n    }, promo)))), __jsx(\"label\", {\n      htmlFor: \"description\"\n    }, \"Description\", __jsx(\"textarea\", {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"Enter A Description\",\n      required: true,\n      value: this.state.description,\n      onChange: this.handleChange\n    })), __jsx(\"label\", {\n      htmlFor: \"features\"\n    }, \"Features\", this.state.features.map((feature, i) => __jsx(\"div\", {\n      key: i\n    }, __jsx(\"textarea\", {\n      key: i,\n      type: \"features\",\n      placeholder: `${feature}` // supply a unique \"name\" attribute using string interpolation\n      ,\n      name: i,\n      value: this.state.features[i],\n      onChange: this.handleFeatureArrayChange,\n      onKeyDown: this.keyPressFeature\n    })))), __jsx(\"label\", {\n      htmlFor: \"highlights\"\n    }, \"Highlights\", this.state.highlights.map((highlight, i) => __jsx(\"div\", {\n      key: i\n    }, __jsx(\"textarea\", {\n      key: i,\n      type: \"highlights\",\n      placeholder: `${highlight}` // supply a unique \"name\" attribute using string interpolation\n      ,\n      name: i,\n      value: this.state.highlights[i],\n      onChange: this.handleHighlightArrayChange,\n      onKeyDown: this.keyPressHighlight\n    })))), __jsx(\"button\", {\n      type: \"submit\"\n    }, \"Submit\")))));\n  }\n\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":null,"metadata":{},"sourceType":"module"}