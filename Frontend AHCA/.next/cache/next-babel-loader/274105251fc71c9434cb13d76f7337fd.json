{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Cart\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    uri: true ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers\n      });\n    },\n    // local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleCart(_, variables, {\n            cache\n          }) {\n            // read the cartOpen value from the cache\n            const {\n              cartOpen\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }); // Write the cart State to the opposite\n\n            const data = {\n              data: {\n                cartOpen: !cartOpen\n              }\n            };\n            cache.writeData(data);\n            return data;\n          }\n\n        }\n      },\n      defaults: {\n        cartOpen: false\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["C:/Users/Wade/Documents/AHCA Web/Frontend AHCA/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndpoint","LOCAL_STATE_QUERY","createClient","headers","uri","request","operation","setContext","fetchOptions","credentials","clientState","resolvers","Mutation","toggleCart","_","variables","cache","cartOpen","readQuery","query","data","writeData","defaults"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,GAAG,EAAE,OAAyCL,QAAzC,GAAoDC,YADnC;AAEtBK,IAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBN,QAAAA;AAJmB,OAArB;AAMD,KATqB;AAUtB;AACAO,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,UAAU,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAAEC,YAAAA;AAAF,WAAf,EAA0B;AAClC;AACA,kBAAM;AAAEC,cAAAA;AAAF,gBAAeD,KAAK,CAACE,SAAN,CAAgB;AACnCC,cAAAA,KAAK,EAAElB;AAD4B,aAAhB,CAArB,CAFkC,CAKlC;;AACA,kBAAMmB,IAAI,GAAG;AACXA,cAAAA,IAAI,EAAE;AAAEH,gBAAAA,QAAQ,EAAE,CAACA;AAAb;AADK,aAAb;AAGAD,YAAAA,KAAK,CAACK,SAAN,CAAgBD,IAAhB;AACA,mBAAOA,IAAP;AACD;;AAZO;AADD,OADA;AAiBXE,MAAAA,QAAQ,EAAE;AACRL,QAAAA,QAAQ,EAAE;AADF;AAjBC;AAXS,GAAjB,CAAP;AAiCD;;AAED,eAAepB,UAAU,CAACK,YAAD,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { endpoint, prodEndpoint } from \"../config\";\r\nimport { LOCAL_STATE_QUERY } from \"../components/Cart\";\r\n\r\nfunction createClient({ headers }) {\r\n  return new ApolloClient({\r\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : prodEndpoint,\r\n    request: operation => {\r\n      operation.setContext({\r\n        fetchOptions: {\r\n          credentials: \"include\"\r\n        },\r\n        headers\r\n      });\r\n    },\r\n    // local data\r\n    clientState: {\r\n      resolvers: {\r\n        Mutation: {\r\n          toggleCart(_, variables, { cache }) {\r\n            // read the cartOpen value from the cache\r\n            const { cartOpen } = cache.readQuery({\r\n              query: LOCAL_STATE_QUERY\r\n            });\r\n            // Write the cart State to the opposite\r\n            const data = {\r\n              data: { cartOpen: !cartOpen }\r\n            };\r\n            cache.writeData(data);\r\n            return data;\r\n          }\r\n        }\r\n      },\r\n      defaults: {\r\n        cartOpen: false\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport default withApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}