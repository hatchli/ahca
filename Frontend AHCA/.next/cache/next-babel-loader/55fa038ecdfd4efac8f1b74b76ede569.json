{"ast":null,"code":"export default function calcTotalPrice(cart) {\n  const promoItems = cart.filter(cartItem => cartItem.promotionPrice !== null);\n  const regularItems = cart.filter(cartItem => cartItem.promotionPrice === null);\n  const promoAmount = promoItems.reduce((tally, cartItem) => tally + cartItem.promotionPrice * cartItem.quantity, 0);\n  const regularAmount = regularItems.reduce((tally, cartItem) => tally + cartItem.price * cartItem.quantity, 0);\n  return cart.reduce((tally, cartItem) => {\n    if (!cartItem.item) return tally;\n    return regularAmount + promoAmount;\n  }, 0);\n}","map":{"version":3,"sources":["C:/Users/Wade/Documents/AHCA Web/Frontend AHCA/lib/calcTotalPrice.js"],"names":["calcTotalPrice","cart","promoItems","filter","cartItem","promotionPrice","regularItems","promoAmount","reduce","tally","quantity","regularAmount","price","item"],"mappings":"AAAA,eAAe,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,QAAMC,UAAU,GAAGD,IAAI,CAACE,MAAL,CAAYC,QAAQ,IAAIA,QAAQ,CAACC,cAAT,KAA4B,IAApD,CAAnB;AACA,QAAMC,YAAY,GAAGL,IAAI,CAACE,MAAL,CACnBC,QAAQ,IAAIA,QAAQ,CAACC,cAAT,KAA4B,IADrB,CAArB;AAIA,QAAME,WAAW,GAAGL,UAAU,CAACM,MAAX,CAClB,CAACC,KAAD,EAAQL,QAAR,KAAqBK,KAAK,GAAGL,QAAQ,CAACC,cAAT,GAA0BD,QAAQ,CAACM,QAD9C,EAElB,CAFkB,CAApB;AAIA,QAAMC,aAAa,GAAGL,YAAY,CAACE,MAAb,CACpB,CAACC,KAAD,EAAQL,QAAR,KAAqBK,KAAK,GAAGL,QAAQ,CAACQ,KAAT,GAAiBR,QAAQ,CAACM,QADnC,EAEpB,CAFoB,CAAtB;AAIA,SAAOT,IAAI,CAACO,MAAL,CAAY,CAACC,KAAD,EAAQL,QAAR,KAAqB;AACtC,QAAI,CAACA,QAAQ,CAACS,IAAd,EAAoB,OAAOJ,KAAP;AACpB,WAAOE,aAAa,GAAGJ,WAAvB;AACD,GAHM,EAGJ,CAHI,CAAP;AAID","sourcesContent":["export default function calcTotalPrice(cart) {\r\n  const promoItems = cart.filter(cartItem => cartItem.promotionPrice !== null);\r\n  const regularItems = cart.filter(\r\n    cartItem => cartItem.promotionPrice === null\r\n  );\r\n\r\n  const promoAmount = promoItems.reduce(\r\n    (tally, cartItem) => tally + cartItem.promotionPrice * cartItem.quantity,\r\n    0\r\n  );\r\n  const regularAmount = regularItems.reduce(\r\n    (tally, cartItem) => tally + cartItem.price * cartItem.quantity,\r\n    0\r\n  );\r\n  return cart.reduce((tally, cartItem) => {\r\n    if (!cartItem.item) return tally;\r\n    return regularAmount + promoAmount;\r\n  }, 0);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}