{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { ALL_ITEMS_QUERY } from \"./Items\";\nimport gql from \"graphql-tag\";\nconst DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\nexport default class DeleteItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      //manually update the cache on the client, so it maches the server\n      //1. Read the cache for the items we want\n      const data = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      }); // console.log(data);\n      //2. Filter the deleted item out of the page\n\n      data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id); //3. Put items back!\n\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_ITEM_MUTATION,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update\n    }, (deleteItem, {\n      error\n    }) => __jsx(\"button\", {\n      onClick: () => {\n        if (confirm(\"Are you sure you want to delete this?\")) {\n          deleteItem().catch(err => {\n            alert(err.message);\n          });\n        }\n      }\n    }, this.props.children));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}