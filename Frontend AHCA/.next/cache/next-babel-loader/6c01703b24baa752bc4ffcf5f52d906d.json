{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: \"/item\",\n    query: {\n      id: item.id\n    }\n  });\n}\n\nexport default class AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      // turn loading on\n      this.setState({\n        loading: true\n      }); //manually query Apollo client\n\n      const res = await client.query({\n        query: SEARCH_ITEMS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        items: res.data.items,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, null, __jsx(Downshift, {\n      onChange: routeToItem,\n      itemToString: item => item === null ? \"\" : item.title\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", null, __jsx(ApolloConsumer, null, client => __jsx(\"input\", getInputProps({\n      type: \"search\",\n      placeholder: \"Search For An Item\",\n      id: \"search\",\n      className: this.state.loading ? \"loading\" : \"\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }))), isOpen && __jsx(DropDown, null, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      item\n    }), {\n      key: item.id,\n      highlighted: index === highlightedIndex\n    }), __jsx(\"img\", {\n      width: \"50\",\n      src: item.image,\n      alt: item.title\n    }), item.title)), !this.state.items.length && !this.state.loading && __jsx(DropDownItem, null, \"Nothing Found For \", inputValue)))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}