{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Wade\\\\Documents\\\\AHCA Web\\\\Frontend AHCA\\\\components\\\\Order.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ORDER_QUERY($id: ID!) {\\n    order(id: $id) {\\n      id\\n      charge\\n      total\\n      createdAt\\n      user {\\n        id\\n      }\\n      items {\\n        id\\n        title\\n        description\\n        price\\n        image\\n        quantity\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Query } from \"react-apollo\";\nimport { format } from \"date-fns\";\nimport Head from \"next/head\";\nimport gql from \"graphql-tag\";\nimport formatMoney from \"../lib/formatMoney\";\nimport Error from \"./ErrorMessage\";\nimport OrderStyles from \"./styles/OrderStyles\";\nvar SINGLE_ORDER_QUERY = gql(_templateObject());\n\nvar Order =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Order, _React$Component);\n\n  function Order() {\n    _classCallCheck(this, Order);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Order).apply(this, arguments));\n  }\n\n  _createClass(Order, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return __jsx(Query, {\n        query: SINGLE_ORDER_QUERY,\n        variables: {\n          id: this.props.id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, function (_ref) {\n        var data = _ref.data,\n            error = _ref.error,\n            loading = _ref.loading;\n        if (error) return __jsx(Error, {\n          error: error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n        if (loading) return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"Loading...\");\n        var order = data.order;\n        return __jsx(OrderStyles, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, __jsx(Head, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, __jsx(\"title\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Sick Fits - Order \", order.id)), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, \"Order ID:\"), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, _this.props.id)), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"Charge\"), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, order.charge)), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"Date\"), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, format(new Date(order.createdAt), \"MMMM d, yyyy h:mm a\"))), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Order Total\"), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, formatMoney(order.total))), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Item Count\"), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, order.items.length)), __jsx(\"div\", {\n          className: \"items\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, order.items.map(function (item) {\n          return __jsx(\"div\", {\n            className: \"order-item\",\n            key: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            src: item.image,\n            alt: item.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }), __jsx(\"div\", {\n            className: \"item-details\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, __jsx(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, item.title), __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, \"Qty: \", item.quantity), __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, \"Each: \", formatMoney(item.price)), __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, \"SubTotal: \", formatMoney(item.price * item.quantity)), __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, item.description)));\n        })));\n      });\n    }\n  }]);\n\n  return Order;\n}(React.Component);\n\n_defineProperty(Order, \"propTypes\", {\n  id: PropTypes.string.isRequired\n});\n\nexport default Order;","map":{"version":3,"sources":["C:/Users/Wade/Documents/AHCA Web/Frontend AHCA/components/Order.js"],"names":["React","PropTypes","Query","format","Head","gql","formatMoney","Error","OrderStyles","SINGLE_ORDER_QUERY","Order","id","props","data","error","loading","order","charge","Date","createdAt","total","items","length","map","item","image","title","quantity","price","description","Component","string","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Query } from \"react-apollo\";\r\nimport { format } from \"date-fns\";\r\nimport Head from \"next/head\";\r\nimport gql from \"graphql-tag\";\r\nimport formatMoney from \"../lib/formatMoney\";\r\nimport Error from \"./ErrorMessage\";\r\nimport OrderStyles from \"./styles/OrderStyles\";\r\n\r\nconst SINGLE_ORDER_QUERY = gql`\r\n  query SINGLE_ORDER_QUERY($id: ID!) {\r\n    order(id: $id) {\r\n      id\r\n      charge\r\n      total\r\n      createdAt\r\n      user {\r\n        id\r\n      }\r\n      items {\r\n        id\r\n        title\r\n        description\r\n        price\r\n        image\r\n        quantity\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Order extends React.Component {\r\n  static propTypes = {\r\n    id: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    return (\r\n      <Query query={SINGLE_ORDER_QUERY} variables={{ id: this.props.id }}>\r\n        {({ data, error, loading }) => {\r\n          if (error) return <Error error={error} />;\r\n          if (loading) return <p>Loading...</p>;\r\n          const order = data.order;\r\n          return (\r\n            <OrderStyles>\r\n              <Head>\r\n                <title>Sick Fits - Order {order.id}</title>\r\n              </Head>\r\n              <p>\r\n                <span>Order ID:</span>\r\n                <span>{this.props.id}</span>\r\n              </p>\r\n              <p>\r\n                <span>Charge</span>\r\n                <span>{order.charge}</span>\r\n              </p>\r\n              <p>\r\n                <span>Date</span>\r\n                <span>\r\n                  {format(new Date(order.createdAt), \"MMMM d, yyyy h:mm a\")}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <span>Order Total</span>\r\n                <span>{formatMoney(order.total)}</span>\r\n              </p>\r\n              <p>\r\n                <span>Item Count</span>\r\n                <span>{order.items.length}</span>\r\n              </p>\r\n              <div className=\"items\">\r\n                {order.items.map(item => (\r\n                  <div className=\"order-item\" key={item.id}>\r\n                    <img src={item.image} alt={item.title} />\r\n                    <div className=\"item-details\">\r\n                      <h2>{item.title}</h2>\r\n                      <p>Qty: {item.quantity}</p>\r\n                      <p>Each: {formatMoney(item.price)}</p>\r\n                      <p>SubTotal: {formatMoney(item.price * item.quantity)}</p>\r\n                      <p>{item.description}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </OrderStyles>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Order;\r\n"]},"metadata":{},"sourceType":"module"}