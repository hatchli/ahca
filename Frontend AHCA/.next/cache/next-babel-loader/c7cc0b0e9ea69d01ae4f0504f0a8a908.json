{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport MapGL, { LinearInterpolator, GeolocateControl } from \"react-map-gl\";\nimport WebMercatorViewport from \"viewport-mercator-project\";\nimport bbox from \"@turf/bbox\";\nimport ControlPanel from \"./ControlPanel\";\nimport MAP_STYLE from \"./styles/MapStyles\";\nimport { Box, Flex } from \"rebass\"; // import MAP_STYLE from 'https://api.mapbox.com/styles/v1/mapbox/light-v9.html?title=false&access_token=pk.eyJ1IjoibXNsZWUiLCJhIjoiclpiTWV5SSJ9.P_h8r37vD8jpIH1A6i1VRg#7.75/33.997/-116.72'\n\nimport LocationCard from \"./LocationCard\";\nconst TOKEN = process.env.MAP_PASS; // Set your mapbox token here\n\nconst geolocateStyle = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  margin: 10\n};\nconst UPDATE_PHONE_LOCATION = gql`\n  mutation UPDATE_PHONE_LOCATION(\n    $name: String\n    $location: String\n    $phone: String\n    $email: String\n  ) {\n    updatePhoneLocation(\n      name: $name\n      location: $location\n      phone: $phone\n      email: $email\n    ) {\n      id\n    }\n  }\n`;\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_updateViewport\", viewport => {\n      this.setState({\n        viewport\n      });\n    });\n\n    _defineProperty(this, \"_onClick\", event => {\n      let countyName = \"\";\n      let clickInfo = null;\n      let county = event.features[0];\n      let feature = event.features[0];\n\n      if (county) {\n        clickInfo = {\n          lngLat: event.lngLat,\n          county: county.properties\n        };\n        countyName = clickInfo.county.name;\n      }\n\n      if (feature) {\n        // calculate the bounding box of the feature\n        const [minLng, minLat, maxLng, maxLat] = bbox(feature); // construct a viewport instance from the current state\n\n        const viewport = new WebMercatorViewport(this.state.viewport);\n        const {\n          longitude,\n          latitude,\n          zoom\n        } = viewport.fitBounds([[minLng, minLat], [maxLng, maxLat]], {\n          padding: 40\n        });\n        console.log(zoom);\n        this.setState({\n          county: countyName,\n          clickInfo,\n          viewport: _objectSpread({}, this.state.viewport, {\n            longitude,\n            latitude,\n            zoom,\n            transitionInterpolator: new LinearInterpolator({\n              around: [event.offsetCenter.x, event.offsetCenter.y]\n            }),\n            transitionDuration: 1000\n          })\n        });\n      }\n    });\n\n    this.state = {\n      county: \"Select Your Location on the Map!\",\n      viewport: {\n        latitude: 34.0537,\n        longitude: -118.243,\n        zoom: 7,\n        bearing: 0,\n        pitch: 0\n      },\n      popupInfo: null,\n      clickInfo: null\n    };\n    this._map = React.createRef();\n  }\n\n  render() {\n    const {\n      viewport\n    } = this.state;\n    const {\n      clickInfo\n    } = this.state;\n    const {\n      county\n    } = this.state;\n    let minZoom = 6;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PHONE_LOCATION,\n      variables: this.state\n    }, (updatePhoneLocation, {\n      loading,\n      error\n    }) => {\n      return __jsx(Flex, {\n        flexWrap: \"wrap\"\n      }, __jsx(Box, {\n        width: [1, 1, 1 / 2],\n        minHeight: \"300px\",\n        minWidth: \"300px\"\n      }, __jsx(MapGL, _extends({\n        ref: this._map,\n        mapStyle: MAP_STYLE,\n        interactiveLayerIds: [\"sf-neighborhoods-fill\"]\n      }, viewport, {\n        width: \"100%\",\n        height: \"100%\",\n        minZoom: minZoom,\n        minHeight: \"1vh\",\n        minWidth: \"1vh\",\n        onClick: this._onClick,\n        county: county // countyInfo={}\n        ,\n        onViewportChange: this._updateViewport,\n        mapboxApiAccessToken: TOKEN,\n        onTransitionEnd: async () => {\n          console.log(\"onchange called\");\n          const res = await updatePhoneLocation();\n          console.log(res);\n        }\n      }), __jsx(ControlPanel, {\n        containerComponent: this.props.containerComponent\n      }), __jsx(GeolocateControl, {\n        style: geolocateStyle,\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      }))), __jsx(Box, {\n        px: 3,\n        width: [1, 1, 1 / 2]\n      }, __jsx(LocationCard, {\n        county: county\n      })));\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}