{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport wait from \"waait\";\nimport { Query, Mutation, withApollo } from \"react-apollo\";\nimport { CURRENT_USER_QUERY } from \"./User\";\nimport gql from \"graphql-tag\";\nimport { Label, Input, Select, Textarea, Radio, Checkbox } from \"@rebass/forms\";\nimport { Box, Flex, Button, Card, Image, Heading, Text } from \"rebass\";\nconst UPDATE_PHONE_LOCATION = gql`\n  mutation UPDATE_PHONE_LOCATION(\n    $name: String\n    $location: String\n    $phone: String\n    $email: String\n  ) {\n    updatePhoneLocation(\n      name: $name\n      location: $location\n      phone: $phone\n      email: $email\n    ) {\n      id\n    }\n  }\n`;\n\nclass LocationCard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      location: \"\",\n      phone: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === \"number\" ? _parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      });\n    });\n\n    _defineProperty(this, \"handleUpdateLocation\", () => {\n      var event = new Event(\"input\", {\n        bubbles: true\n      });\n      this.myinput.dispatchEvent(event);\n    });\n\n    _defineProperty(this, \"handleChangeLocation\", async () => {\n      await wait(300);\n      this.props.client.mutate({\n        mutation: UPDATE_PHONE_LOCATION,\n        variables: this.state\n      });\n      console.log(this.state.location);\n      console.log(\"handleChangeLocation called\");\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.county !== prevProps.county && this.props.county !== \"Select Your Location on the Map!\") {\n      this.setState(prevState => _objectSpread({}, prevState, {\n        location: this.props.county\n      }));\n      console.log(this.state.location);\n      this.handleChangeLocation();\n      console.log(this.state.location);\n    }\n  }\n\n  render() {\n    const maround = [1, 3];\n    const pleft = [0, 1, 2, 3];\n    const wconst = [1, 1 / 4]; // const [county] = this.props;\n\n    return __jsx(React.Fragment, null, __jsx(Query, {\n      query: CURRENT_USER_QUERY\n    }, ({\n      data,\n      loading\n    }) => {\n      return __jsx(Mutation, {\n        mutation: UPDATE_PHONE_LOCATION,\n        variables: this.state\n      }, (updatePhoneLocation, {\n        loading,\n        error\n      }) => {\n        return __jsx(\"div\", null, __jsx(Box, {\n          as: \"form\",\n          onSubmit: async e => {\n            e.preventDefault();\n            const res = await updatePhoneLocation();\n          },\n          pl: pleft,\n          py: 3,\n          width: 1\n        }, __jsx(Heading, {\n          pcolor: \"near-black\",\n          fontSize: [4, 5, 6]\n        }, \"Are we in your neighboorhood?\"), __jsx(Flex, {\n          flexWrap: \"wrap\"\n        }, __jsx(Box, {\n          width: wconst,\n          mx: maround,\n          pl: pleft\n        }, __jsx(Label, {\n          htmlFor: \"name\"\n        }, \"Name\"), __jsx(Input, {\n          id: \"name\",\n          name: \"name\",\n          type: \"text\",\n          placeholder: \"Name\",\n          value: this.state.name,\n          onChange: async e => {\n            this.handleChange(e);\n            await wait(3000);\n            const res = await updatePhoneLocation();\n            {\n              error && alert(error);\n            }\n          }\n        })), __jsx(Box, {\n          width: wconst,\n          mx: maround\n        }, __jsx(Label, {\n          htmlFor: \"name\"\n        }, \"Phone\"), __jsx(Input, {\n          id: \"phone\",\n          name: \"phone\",\n          type: \"text\",\n          placeholder: \"Phone\",\n          value: this.state.phone,\n          onChange: async e => {\n            this.handleChange(e);\n            await wait(3000);\n            const res = await updatePhoneLocation();\n          }\n        })), __jsx(Box, {\n          width: wconst,\n          mx: maround\n        }, __jsx(Label, {\n          htmlFor: \"location\"\n        }, \"Location\"), this.state.location !== \"\" ? __jsx(Heading, {\n          fontSize: [3, 4, 5],\n          color: \"near-black\"\n        }, this.props.county) : __jsx(Heading, {\n          fontSize: [3, 4, 3],\n          color: \"near-black\"\n        }, this.props.county))), __jsx(Flex, {\n          mx: -2,\n          flexWrap: \"wrap\"\n        }, __jsx(Box, {\n          p: 2,\n          ml: \"[3, 4, 5, 6]\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          bg: \"dark-green\"\n        }, \"Submit\")))));\n      });\n    }));\n  }\n\n}\n\nexport default withApollo(LocationCard);","map":null,"metadata":{},"sourceType":"module"}