{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_PHONE_ADDRESS(\\n    $name: String!\\n    $address: String!\\n    $postal: String!\\n    $phone: String!\\n    $email: String!\\n  ) {\\n    updatePhoneAddress(\\n      name: $name\\n      address: $address\\n      postal: $postal\\n      phone: $phone\\n      email: $email\\n    ) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { CURRENT_USER_QUERY } from \"./User\";\nimport gql from \"graphql-tag\";\nimport { Label, Input, Select, Textarea, Radio, Checkbox } from \"@rebass/forms\";\nimport { Box, Flex, Button, Card, Image, Heading, Text } from \"rebass\";\nimport Head from \"next/head\";\nimport TakeMyMoney from \"./TakeMyMoney\";\nvar UPDATE_PHONE_ADDRESS = gql(_templateObject());\n\nvar updatePhoneAddress =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(updatePhoneAddress, _Component);\n\n  function updatePhoneAddress() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, updatePhoneAddress);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(updatePhoneAddress)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      name: \"\",\n      address: \"\",\n      postal: \"\",\n      email: \"\",\n      phone: \"\",\n      checkout: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          type = _e$target.type,\n          value = _e$target.value;\n      var val = type === \"number\" ? _parseFloat(value) : value;\n\n      _this.setState(_defineProperty({}, name, val));\n\n      if (_this.state.name !== \"\" && _this.state.address !== \"\" && _this.state.postal !== \"\" && _this.state.email !== \"\" && _this.state.phone !== \"\") {\n        _this.setState({\n          checkout: true\n        });\n      }\n\n      if (_this.state.name == \"\" || _this.state.address == \"\" || _this.state.postal == \"\" || _this.state.email == \"\" || _this.state.phone == \"\") {\n        _this.setState({\n          checkout: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(updatePhoneAddress, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var maround = 0;\n      var pleft = 0;\n      var wconst = [1, 3 / 4];\n      var fconst = [1, 2];\n      var myconst = [2]; // const hconst = [7, 2];\n      // const [county] = this.props;\n\n      return __jsx(React.Fragment, null, __jsx(Query, {\n        query: CURRENT_USER_QUERY\n      }, function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading;\n        return __jsx(Mutation, {\n          mutation: UPDATE_PHONE_ADDRESS,\n          variables: _this2.state\n        }, function (updatePhoneAddress, _ref2) {\n          var loading = _ref2.loading,\n              error = _ref2.error;\n          return __jsx(Box, {\n            as: \"form\",\n            onSubmit: function _callee(e) {\n              var res;\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      e.preventDefault();\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(updatePhoneAddress());\n\n                    case 3:\n                      res = _context.sent;\n                      console.log(res);\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              });\n            },\n            pl: pleft,\n            py: 3,\n            fontSize: fconst\n          }, __jsx(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }, __jsx(Box, {\n            alignItems: \"center\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\"\n          }, __jsx(Heading, {\n            fontSize: [3, 5]\n          }), __jsx(Box, {\n            width: wconst,\n            mx: maround,\n            pl: pleft,\n            my: myconst\n          }, __jsx(Input, {\n            required: true,\n            id: \"name\",\n            name: \"name\",\n            type: \"text\",\n            placeholder: \"Name\",\n            value: _this2.state.name,\n            onChange: function _callee2(e) {\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _this2.handleChange(e);\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              });\n            }\n          })), __jsx(Box, {\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, __jsx(Input, {\n            required: true,\n            id: \"phone\",\n            name: \"phone\",\n            type: \"text\",\n            placeholder: \"Phone\",\n            value: _this2.state.phone,\n            onChange: function _callee3(e) {\n              return _regeneratorRuntime.async(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _this2.handleChange(e);\n\n                    case 1:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              });\n            }\n          })), __jsx(Box, {\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, __jsx(Input, {\n            required: true,\n            id: \"email\",\n            name: \"email\",\n            type: \"text\",\n            placeholder: \"Email\",\n            value: _this2.state.email,\n            onChange: function _callee4(e) {\n              return _regeneratorRuntime.async(function _callee4$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _this2.handleChange(e);\n\n                    case 1:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              });\n            }\n          })), __jsx(Box, {\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, __jsx(Input, {\n            required: true,\n            id: \"address\",\n            name: \"address\",\n            type: \"text\",\n            placeholder: \"Address\",\n            value: _this2.state.address,\n            onChange: function _callee5(e) {\n              return _regeneratorRuntime.async(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _this2.handleChange(e);\n\n                    case 1:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              });\n            }\n          })), __jsx(Box, {\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, __jsx(Input, {\n            required: true,\n            id: \"postal\",\n            name: \"postal\",\n            type: \"text\",\n            placeholder: \"Zip Code\",\n            value: _this2.state.postal,\n            onChange: function _callee6(e) {\n              return _regeneratorRuntime.async(function _callee6$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      _this2.handleChange(e);\n\n                    case 1:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }\n              });\n            }\n          })), _this2.state.checkout ? __jsx(Button, {\n            type: \"submit\",\n            bg: \"dark-green\",\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, __jsx(TakeMyMoney, null, \"Proceed to Checkout\")) : __jsx(Button, {\n            disabled: true,\n            type: \"submit\",\n            bg: \"dark-gray\",\n            width: wconst,\n            mx: maround,\n            my: myconst\n          }, \"Proceed to Checkout\"))));\n        });\n      }));\n    }\n  }]);\n\n  return updatePhoneAddress;\n}(Component);\n\nexport default updatePhoneAddress;","map":null,"metadata":{},"sourceType":"module"}