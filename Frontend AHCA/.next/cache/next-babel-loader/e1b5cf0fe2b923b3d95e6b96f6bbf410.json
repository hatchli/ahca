{"ast":null,"code":"var __jsx = React.createElement;\nimport SingleItem from \"../components/SingleItem\";\nimport React, { useState, useEffect } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { CURRENT_USER_QUERY } from \"../components/User\";\nimport User from \"../components/User\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"../components/theme\";\nconst CREATE_GUEST_MUTATION = gql`\n  mutation CREATE_GUEST_MUTATION(\n    $email: String\n    $name: String\n    $password: String\n  ) {\n    createGuest(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Item = (props, {\n  id\n}) => __jsx(ThemeProvider, {\n  theme: theme\n}, __jsx(User, null, ({\n  data,\n  loading\n}) => {\n  let me = data ? data.me : null;\n  let guest = me === null ? true : false;\n  const {\n    0: guestState,\n    1: setGuestState\n  } = useState(guest);\n  return !guest ? __jsx(\"div\", null, __jsx(SingleItem, {\n    id: props.query.id\n  })) : loading ? __jsx(\"div\", null, __jsx(\"h2\", null, \"Loading\")) : __jsx(Mutation, {\n    mutation: CREATE_GUEST_MUTATION,\n    variables: {\n      id\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }, (createGuest, {\n    loading,\n    error\n  }) => {\n    useEffect(() => {\n      async function fetchData() {\n        await createGuest();\n      }\n\n      !loading && guest && fetchData();\n    }, []);\n    setGuestState(false);\n    return __jsx(React.Fragment, null, __jsx(SingleItem, {\n      id: props.query.id\n    }));\n  });\n}));\n\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}