{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { formatDistance } from \"date-fns\";\nimport parseISO from \"date-fns/parseISO\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport styled from \"styled-components\";\nimport formatMoney from \"../lib/formatMoney\";\nimport OrderItemStyles from \"./styles/OrderItemStyles\";\nimport Error from \"./ErrorMessage\";\nimport WidthStyles from \"./styles/WidthStyles\";\nconst USER_ORDERS_QUERY = gql`\n  query USER_ORDERS_QUERY {\n    orders(orderBy: createdAt_DESC) {\n      id\n      total\n      createdAt\n      items {\n        id\n        title\n        price\n        description\n        quantity\n        image\n      }\n    }\n  }\n`;\nconst OrderUl = styled.ul.withConfig({\n  displayName: \"OrderList__OrderUl\",\n  componentId: \"sc-1ho1jd6-0\"\n})([\"display:grid;grid-gap:4rem;grid-template-columns:repeat(auto-fit,minmax(40%,1fr));\"]);\nexport default class OrderList extends React.Component {\n  render() {\n    return __jsx(WidthStyles, null, __jsx(Query, {\n      query: USER_ORDERS_QUERY\n    }, ({\n      data\n    }) => {\n      const orders = data ? data.orders : null;\n      const loading = data ? data.loading : null;\n      const error = data ? data.error : null;\n      if (loading) return __jsx(\"p\", null, \"Loading...\");\n      if (error) return __jsx(Error, {\n        error: error\n      });\n      return __jsx(\"div\", null, __jsx(\"h2\", null, \"You have \", orders === null || orders === void 0 ? void 0 : orders.length, \" orders\"), __jsx(OrderUl, null, orders === null || orders === void 0 ? void 0 : orders.map(order => __jsx(OrderItemStyles, {\n        key: order.id\n      }, __jsx(Link, {\n        href: {\n          pathname: \"/order\",\n          query: {\n            id: order.id\n          }\n        }\n      }, __jsx(\"a\", null, __jsx(\"div\", {\n        className: \"order-meta\"\n      }, __jsx(\"p\", null, order.items.reduce((item, tally) => item + tally.quantity, 0), \" \", \"Items\"), __jsx(\"p\", null, order.items.length, \" Products\"), __jsx(\"p\", null, formatDistance(parseISO(order.createdAt), new Date())), __jsx(\"p\", null, formatMoney(order.total))), __jsx(\"div\", {\n        className: \"images\"\n      }, order.items.map(item => __jsx(\"img\", {\n        key: item.id,\n        src: item.image,\n        alt: item.itlte\n      })), \" \")))))));\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}