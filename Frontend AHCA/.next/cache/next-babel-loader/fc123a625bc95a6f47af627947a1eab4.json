{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Wade\\\\Documents\\\\AHCA Web\\\\Frontend AHCA\\\\components\\\\DeleteItem.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { ALL_ITEMS_QUERY } from \"./Items\";\nimport gql from \"graphql-tag\";\nconst DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\nexport default class DeleteItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      //manually update the cache on the client, so it maches the server\n      //1. Read the cache for the items we want\n      const data = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      }); // console.log(data);\n      //2. Filter the deleted item out of the page\n\n      data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id); //3. Put items back!\n\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_ITEM_MUTATION,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, (deleteItem, {\n      error\n    }) => __jsx(\"button\", {\n      onClick: () => {\n        if (confirm(\"Are you sure you want to delete this?\")) {\n          deleteItem().catch(err => {\n            alert(err.message);\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Wade/Documents/AHCA Web/Frontend AHCA/components/DeleteItem.js"],"names":["React","Component","Mutation","ALL_ITEMS_QUERY","gql","DELETE_ITEM_MUTATION","DeleteItem","cache","payload","data","readQuery","query","items","filter","item","id","deleteItem","writeQuery","render","props","update","error","confirm","catch","err","alert","message","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,oBAAoB,GAAGD,GAAI;;;;;;CAAjC;AAQA,eAAe,MAAME,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;;AAAA,oCACvC,CAACM,KAAD,EAAQC,OAAR,KAAoB;AAC3B;AACA;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAER;AAAT,OAAhB,CAAb,CAH2B,CAI3B;AACA;;AACAM,MAAAA,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACG,KAAL,CAAWC,MAAX,CACXC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYP,OAAO,CAACC,IAAR,CAAaO,UAAb,CAAwBD,EADjC,CAAb,CAN2B,CAS3B;;AACAR,MAAAA,KAAK,CAACU,UAAN,CAAiB;AAAEN,QAAAA,KAAK,EAAER,eAAT;AAA0BM,QAAAA;AAA1B,OAAjB;AACD,KAZ+C;AAAA;;AAahDS,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEb,oBADZ;AAEE,MAAA,SAAS,EAAE;AAAEU,QAAAA,EAAE,EAAE,KAAKI,KAAL,CAAWJ;AAAjB,OAFb;AAGE,MAAA,MAAM,EAAE,KAAKK,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,CAACJ,UAAD,EAAa;AAAEK,MAAAA;AAAF,KAAb,KACC;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIC,OAAO,CAAC,uCAAD,CAAX,EAAsD;AACpDN,UAAAA,UAAU,GAAGO,KAAb,CAAmBC,GAAG,IAAI;AACxBC,YAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,WAFD;AAGD;AACF,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASG,KAAKP,KAAL,CAAWQ,QATd,CANJ,CADF;AAqBD;;AAnC+C","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { ALL_ITEMS_QUERY } from \"./Items\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst DELETE_ITEM_MUTATION = gql`\r\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\r\n    deleteItem(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class DeleteItem extends Component {\r\n  update = (cache, payload) => {\r\n    //manually update the cache on the client, so it maches the server\r\n    //1. Read the cache for the items we want\r\n    const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\r\n    // console.log(data);\r\n    //2. Filter the deleted item out of the page\r\n    data.items = data.items.filter(\r\n      item => item.id !== payload.data.deleteItem.id\r\n    );\r\n    //3. Put items back!\r\n    cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\r\n  };\r\n  render() {\r\n    return (\r\n      <Mutation\r\n        mutation={DELETE_ITEM_MUTATION}\r\n        variables={{ id: this.props.id }}\r\n        update={this.update}\r\n      >\r\n        {(deleteItem, { error }) => (\r\n          <button\r\n            onClick={() => {\r\n              if (confirm(\"Are you sure you want to delete this?\")) {\r\n                deleteItem().catch(err => {\r\n                  alert(err.message);\r\n                });\r\n              }\r\n            }}\r\n          >\r\n            {this.props.children}\r\n          </button>\r\n        )}\r\n      </Mutation>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}