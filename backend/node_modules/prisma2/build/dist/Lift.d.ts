import { ProviderAliases } from '@prisma/sdk';
import { DevComponentRenderer } from './ink/DevComponentRenderer';
import { LiftEngine } from './LiftEngine';
import { EngineResults, FileMap, LocalMigrationWithDatabaseSteps, LockFile, Migration } from './types';
export interface UpOptions {
    preview?: boolean;
    n?: number;
    short?: boolean;
    verbose?: boolean;
    autoApprove?: boolean;
    onWarnings?: (warnings: EngineResults.Warning[]) => Promise<boolean>;
}
export interface DownOptions {
    n?: number;
}
export interface WatchOptions {
    preview?: boolean;
    providerAliases: ProviderAliases;
    clear?: boolean;
    autoApprove?: boolean;
    onWarnings?: (warnings: EngineResults.Warning[]) => Promise<boolean>;
}
export declare class Lift {
    get devMigrationsDir(): string;
    engine: LiftEngine;
    watchUp: ({ preview, providerAliases, clear, onWarnings, autoApprove }?: WatchOptions, renderer?: DevComponentRenderer | undefined) => Promise<void>;
    private datamodelBeforeWatch;
    private studioServer?;
    private studioPort;
    private projectDir;
    constructor(projectDir?: string);
    getSchemaDir(): string;
    getDatamodel(): string;
    getSourceConfig(): string;
    recreateStudioServer(providerAliases: ProviderAliases): Promise<string | undefined>;
    getLockFile(): Promise<LockFile>;
    createMigration(migrationId: string): Promise<LocalMigrationWithDatabaseSteps | undefined>;
    getMigrationId(name?: string): string;
    save(migration: LocalMigrationWithDatabaseSteps, name?: string, preview?: boolean): Promise<{
        files: FileMap;
        migrationId: string;
        newLockFile: string;
    }>;
    getLocalWatchMigrations(): Promise<Migration[]>;
    watch(options?: WatchOptions): Promise<string>;
    down({ n }: DownOptions): Promise<string>;
    up({ n, preview, short, verbose, autoApprove, onWarnings }?: UpOptions): Promise<string>;
    stop(): void;
    private getMigrationFileMap;
    private persistWatchMigration;
    private getLocalMigrations;
    private getDatabaseSteps;
    private getMigrationsToApply;
}
