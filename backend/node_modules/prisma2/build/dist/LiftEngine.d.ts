import { EngineArgs, EngineResults } from './types';
export interface LiftEngineOptions {
    projectDir: string;
    schemaPath: string;
    binaryPath?: string;
    debug?: boolean;
}
export interface RPCPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any;
}
export declare class EngineError extends Error {
    code: number;
    constructor(message: string, code: number);
}
export declare class LiftEngine {
    private binaryPath;
    private projectDir;
    private debug;
    private child?;
    private schemaPath;
    private listeners;
    private messages;
    private lastRequest?;
    private lastError?;
    private initPromise?;
    constructor({ projectDir, binaryPath, // ncc go home
    debug, schemaPath, }: LiftEngineOptions);
    stop(): void;
    applyMigration(args: EngineArgs.ApplyMigration): Promise<EngineResults.ApplyMigration>;
    unapplyMigration(args: EngineArgs.UnapplyMigration): Promise<EngineResults.UnapplyMigration>;
    calculateDatamodel(args: EngineArgs.CalculateDatamodel): Promise<EngineResults.CalculateDatamodel>;
    calculateDatabaseSteps(args: EngineArgs.CalculateDatabaseSteps): Promise<EngineResults.ApplyMigration>;
    inferMigrationSteps(args: EngineArgs.InferMigrationSteps): Promise<EngineResults.InferMigrationSteps>;
    listAppliedMigrations(args: EngineArgs.ListMigrations): Promise<EngineResults.ListMigrations>;
    migrationProgess(args: EngineArgs.MigrationProgress): Promise<EngineResults.MigrationProgress>;
    private rejectAll;
    private registerCallback;
    private handleResponse;
    private init;
    private internalInit;
    private runCommand;
    private persistError;
    private getRPCPayload;
}
