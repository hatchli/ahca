export declare var Prism: {
    manual: any;
    disableWorkerMessageHandler: any;
    util: {
        encode: (tokens: any) => any;
        type: (o: any) => string;
        objId: (obj: any) => any;
        clone: (o: any, visited?: any) => any;
    };
    languages: {
        extend: (id: any, redef: any) => any;
        /**
         * Insert a token before another token in a language literal
         * As this needs to recreate the object (we cannot actually insert before keys in object literals),
         * we cannot just provide an object, we need an object and a key.
         * @param inside The key (or language id) of the parent
         * @param before The key to insert before.
         * @param insert Object with the key/value pairs to insert
         * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
         */
        insertBefore: (inside: any, before: any, insert: any, root: any) => {};
        DFS: (o: any, callback: any, type?: any, visited?: any) => void;
    };
    plugins: {};
    highlight: (text: any, grammar: any, language: any) => any;
    matchGrammar: (text: any, strarr: any, grammar: any, index: any, startPos: any, oneshot: any, target?: any) => void;
    tokenize: (text: any, grammar: any) => any[];
    hooks: {
        all: {};
        add: (name: any, callback: any) => void;
        run: (name: any, env: any) => void;
    };
    Token: typeof Token;
};
export declare function Token(this: any, type: any, content: any, alias: any, matchedStr?: any, greedy?: any): void;
export declare namespace Token {
    var stringify: (o: any, language?: any) => any;
}
