export interface IntrospectionEngineOptions {
    binaryPath?: string;
    debug?: boolean;
    cwd?: string;
}
export interface RPCPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any;
}
export declare class IntrospectionPanic extends Error {
    request: any;
    rustStack: string;
    constructor(message: string, rustStack: string, request: any);
}
export declare class IntrospectionEngine {
    private binaryPath?;
    private debug;
    private cwd;
    private child?;
    private listeners;
    private messages;
    private lastRequest?;
    private lastError?;
    private initPromise?;
    constructor({ binaryPath, debug, cwd }?: IntrospectionEngineOptions);
    stop(): void;
    private rejectAll;
    private registerCallback;
    introspect(url: string): Promise<string>;
    listDatabases(url: string): Promise<string[]>;
    getDatabaseMetadata(url: string): Promise<{
        size_in_bytes: number;
        table_count: number;
    }>;
    private handleResponse;
    private init;
    private getBinaryPath;
    private internalInit;
    private runCommand;
    private persistError;
    private getRPCPayload;
}
