import { RustLog, RustError } from './log';
/**
 * A PrismaClientError is mostly a non-recoverable error like a panic
 */
export declare class PrismaClientError extends Error {
    constructor(log: RustLog | RustError);
}
export interface QueryEngineError {
    error: string;
    user_facing_error: {
        message: string;
        meta?: Object;
        error_code?: string;
    };
}
/**
 * A PrismaClientQueryError is an error that is thrown in conjunction to a concrete query that has been performed with Prisma Client.
 */
export declare class PrismaClientQueryError extends Error {
    code?: string;
    meta?: Object;
    constructor(error: QueryEngineError);
}
/**
 * Engine Base Class used by Browser and Node.js
 */
export declare abstract class Engine {
    /**
     * Starts the engine
     */
    abstract start(): Promise<void>;
    /**
     * If Prisma runs, stop it
     */
    abstract stop(): void;
    abstract request<T>(query: string, typeName?: string): Promise<T>;
    abstract handleErrors({ errors, query }: {
        errors?: any;
        query: string;
    }): void;
}
